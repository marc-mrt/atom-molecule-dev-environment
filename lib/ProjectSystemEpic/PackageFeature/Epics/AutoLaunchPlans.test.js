"use babel";
// @flow

import { Map } from "immutable";
import configureMockStore from "redux-mock-store";
import { createEpicMiddleware } from "redux-observable";
import autoRunPlansEpic from "./AutoLaunchPlans";
import { runTask } from "../../../ExecutionControlEpic/TaskExecutionFeature/Actions/RunTask";

jest.useFakeTimers();

describe("AutoLaunch Epic", () => {
  let store;

  const fakePluginInfo = {
    tool: {
      id: "1",
      name: "toolName",
      iconUri: "toolIcon",
      uri: "file:///file",
    },
    isPackage: "package.json",
  };

  const fakePackageInfo = {
    name: "package.json",
    path: "/firstDir/package.json",
    uriPlatform: "posix",
    type: "file",
  };

  const fakeConfig = {
    name: "test1",
    value: {
      caseValue: { script: "script1", environmentVariables: [] },
      expressionValue: "run",
    },
  };

  beforeEach(() => {
    const epicAutoLaunchPlans = createEpicMiddleware(autoRunPlansEpic);
    const mockStore = configureMockStore([epicAutoLaunchPlans]);
    store = mockStore({
      plans: Map(),
    });
  });

  it("should do nothing without autoRun", () => {
    const fakePackage = { ...fakePackageInfo, plugin: fakePluginInfo };
    const fakePlugin = {
      ...fakePluginInfo,
      generatePlansForPackage: packageName => [fakeConfig],
    };
    const addPlanAction = {
      type: "ADD_PLAN_CONFIGURATION",
      payload: {
        id: "0",
        name: "test1",
        tool: fakePlugin.tool,
        autoGenerated: true,
        config: fakeConfig.value,
        stager: { type: "integrated" },
        packageInfo: fakePackage,
      },
    };

    store.dispatch(addPlanAction);
    jest.runAllTimers();

    expect(store.getActions()).toEqual([addPlanAction]);
  });

  it("should dispatch a runTask", () => {
    const fakePackage = { ...fakePackageInfo, plugin: fakePluginInfo };
    const fakePlugin = {
      ...fakePluginInfo,
      generatePlansForPackage: packageName => [fakeConfig],
    };

    const addPlanAction = {
      type: "ADD_PLAN_CONFIGURATION",
      payload: {
        id: "0",
        name: "test1",
        tool: fakePlugin.tool,
        autoGenerated: true,
        autoRun: true,
        config: fakeConfig.value,
        packageInfo: fakePackage,
      },
    };

    store.dispatch(addPlanAction);
    jest.runAllTimers();

    expect(store.getActions()).toEqual([
      addPlanAction,
      runTask(addPlanAction.payload, { type: "integrated" }),
    ]);
  });
});
