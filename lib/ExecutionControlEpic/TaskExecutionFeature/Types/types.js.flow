"use babel";
// @flow

import type { DevToolInfo } from "../../PlanConfigurationFeature/Types/types.js.flow";
import type { WatchFilesController } from "../../../EventSystemEpic/FileFeature/Types/types.flow";
import type {
  NodeProcessController,
  NodeProcessStrategy,
} from "../Model/Strategies/NodeProcessStrategy";
import type {
  ShellController,
  ShellStrategy,
} from "../Model/Strategies/ShellStrategy";
import type {
  TerminalController,
  TerminalStrategy,
} from "../Model/Strategies/TerminalStrategy";

export type TaskState =
  | "created"
  | "running"
  | "stopped"
  | "crashed"
  | "succeed"
  | "failed"
  | null;

export type Task = {
  id: string,
  plan: {
    config: mixed,
    tool: DevToolInfo,
  },
  strategy: Strategy,
  state: TaskState,
  busy?: boolean,
  step: number,
  debut: number, // Date's timestamp
  end?: number, // Date's timestamp
  terminal: boolean,
};

export type Process = child_process$ChildProcess;

export type TaskExecution = {
  task: Task,
  process: Process,
  terminal?: any,
  broker: events$EventEmitter,
};

export type TaskManager = {
  executions: Array<TaskExecution>,
};

export type Strategy = ShellStrategy | NodeProcessStrategy | TerminalStrategy;
export type BasicController =
  | ShellController
  | NodeProcessController
  | TerminalController;
export type Controller = BasicController & {
  watchFiles?: WatchFilesController,
};
export type StrategyConfig =
  | {
      strategy: ShellStrategy,
      controller: ShellController,
    }
  | {
      strategy: NodeProcessStrategy,
      controller: NodeProcessController,
    };

export type StrategyRunner = (
  strategy: Strategy,
  controller: Controller,
) => Process;

export type StagerRunner = (
  strategy: Strategy,
  controller: Controller,
) => ?Process;

export type { DevToolInfo };
