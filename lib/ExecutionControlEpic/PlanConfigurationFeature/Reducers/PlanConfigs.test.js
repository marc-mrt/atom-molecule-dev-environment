"use babel";
// @flow

import PlanConfigs from "./PlanConfigs";
import type { AddPlanConfigAction } from "../Actions/AddPlanConfig";
import { addPlanConfig } from "../Actions/AddPlanConfig";
import type { PinPlanConfigAction } from "../Actions/PinPlanConfig";
import { pinPlanConfig } from "../Actions/PinPlanConfig";
import type { UnpinPlanConfigAction } from "../Actions/UnpinPlanConfig";
import { unpinPlanConfig } from "../Actions/UnpinPlanConfig";
import type { RemovePlanConfigAction } from "../Actions/RemovePlanConfig";
import { removePlanConfig } from "../Actions/RemovePlanConfig";
import type { RemoveGeneratedPlansAction } from "../Actions/RemoveGeneratedPlans";
import { removeGeneratedPlans } from "../Actions/RemoveGeneratedPlans";
import type { PlanConfig } from "../Types/types";
import { Map } from "immutable";

describe("PlanConfigs", () => {
  const planConfig: PlanConfig = {
    name: "ls",
    id: "0",
    tool: {
      id: "toolid",
      name: "shell",
      iconUri: "atom://myplugin/icon.png",
      uri: "file:///file",
    },
    autoGenerated: false,
    config: "ls -l",
    packageInfo: {
      name: "",
      path: "/",
      type: "directory",
    },
    pinned: false,
  };
  const planConfig2: PlanConfig = {
    name: "mimikatz",
    id: "1",
    tool: {
      id: "toolid",
      name: "powershell",
      iconUri: "atom://myplugin/icon.png",
      uri: "file:///file",
    },
    autoGenerated: false,
    config: "Invoke-Mimikatz",
    packageInfo: {
      name: "package.json",
      path: "/firstDir/package.json",
      type: "file",
    },
    pinned: false,
  };

  describe("ADD_PLAN_CONFIGURATION", () => {
    it("should add a plan configuration", () => {
      let state = Map();
      let action: AddPlanConfigAction = addPlanConfig(planConfig);
      let subject = PlanConfigs(state, action);

      expect(subject).toMatchSnapshot();
    });
  });

  describe("PIN_PLAN_CONFIGURATION", () => {
    it("should pin plan config", () => {
      let state = Map([
        ["toolid", Map([["0", planConfig], ["1", planConfig2]])],
      ]);
      let action: PinPlanConfigAction = pinPlanConfig(
        Object.assign({}, planConfig, { state: null }),
      );
      let subject = PlanConfigs(state, action);

      expect(subject).toMatchSnapshot();
    });
  });

  describe("UNPIN_PLAN_CONFIGURATION", () => {
    it("should unpin plan config", () => {
      let state = Map([
        ["toolid", Map([["0", planConfig], ["1", planConfig2]])],
      ]);
      let action: UnpinPlanConfigAction = unpinPlanConfig(
        Object.assign({}, planConfig, { state: null }),
      );
      let subject = PlanConfigs(state, action);

      expect(subject).toMatchSnapshot();
    });
  });

  describe("REMOVE_PLAN_CONFIGURATION", () => {
    it("should remove plan config", () => {
      let state = Map([
        ["toolid", Map([["0", planConfig], ["1", planConfig2]])],
      ]);
      let action: RemovePlanConfigAction = removePlanConfig(
        Object.assign({}, planConfig, { state: null }),
      );
      let subject = PlanConfigs(state, action);

      expect(subject).toMatchSnapshot();
    });
  });

  describe("REMOVE_GENERATED_PLANS", () => {
    it("should remove generated plans", () => {
      const planConfig3 = { ...planConfig2, autoGenerated: true };

      let state = Map([
        ["toolid", Map([["0", planConfig], ["1", planConfig3]])],
      ]);
      let action: RemoveGeneratedPlansAction = removeGeneratedPlans(
        planConfig.tool,
      );
      let subject = PlanConfigs(state, action);

      expect(subject).toMatchSnapshot();
    });
  });
});
