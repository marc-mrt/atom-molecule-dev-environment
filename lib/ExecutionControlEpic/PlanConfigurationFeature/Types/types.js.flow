"use babel";
// @flow

import type { PackageInfo } from "../../../ProjectSystemEpic/PackageFeature/Types/types";

export type Directory = {
  name: string,
  files: Array<string | Directory>,
};

export type ConfigSchemaPartBase = {
  label?: string,
  description?: string,
};

export type ObjectConfigSchema = ConfigSchemaPartBase & {
  type: "object",
  default?: any,
  schemas: { [key: string]: ConfigSchemaPart },
};

export type ArrayConfigSchema = ConfigSchemaPartBase & {
  type: "array",
  default?: Array<any>,
  items: ConfigSchemaPart,
};

export type StringConfigSchema = ConfigSchemaPartBase & {
  type: "string",
  default: string,
  placeholder?: string,
};

export type BooleanConfigSchema = ConfigSchemaPartBase & {
  type: "boolean",
  default: boolean,
};

export type NumberConfigSchema = ConfigSchemaPartBase & {
  type: "number",
  default: number,
  placeholder?: string,
};

export type ConditionalConfigSchema = ConfigSchemaPartBase & {
  type: "conditional",
  expression: EnumConfigSchema | StringConfigSchema,
  cases: { [key: string]: ?ConfigSchemaPart },
};

export type DevToolPlanConfig = mixed;

export type EnumConfigSchema = ConfigSchemaPartBase & {
  type: "enum",
  default: DevToolPlanConfig,
  enum: Array<{ value: any, description: string }>,
};

export type FileConfigSchema = ConfigSchemaPartBase & {
  type: "file",
  default: string,
  tester:
    | RegExp
    | string
    | ((file: string, directory: ?Directory) => boolean | false),
};

export type ConfigSchemaPart =
  | FileConfigSchema
  | ArrayConfigSchema
  | StringConfigSchema
  | BooleanConfigSchema
  | NumberConfigSchema
  | EnumConfigSchema
  | ObjectConfigSchema
  | ConditionalConfigSchema;

export type DevToolInfo = {
  id: string,
  name: string,
  iconUri: string,
  uri: string,
};

export type DevToolPlanConfigSchema = ConfigSchemaPart & { tool: DevToolInfo };

export type PlanObject =
  | string
  | number
  | boolean
  | Object
  | Array<PlanObject>
  | { caseValue: string, expressionValue: PlanObject }

export type GeneratedPlanObject = {
  name: string,
  value: PlanObject,
  autoRun?: boolean,
}

export type PlanConfig = {
  id: string,
  name: string,
  tool: DevToolInfo,
  autoGenerated?: boolean,
  autoRun?: boolean,
  config: PlanObject,
  pinned?: boolean,
  packageInfo: PackageInfo,
};
